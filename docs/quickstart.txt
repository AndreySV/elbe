Embedded Linux Build Environment (elbe) Quickstart Guide
========================================================

Elbe is a
Debian based system to generate root-filesystems for embedded devices.

You have probably received a root-filesystem, which has been built with Elbe.
Additionally you should have an xml File describing the root-filesystem.

This quickstart guide describes the steps necessary to rebuild the
root-filesystem from the xml File.

Steps necessary
---------------

. Install Debian 8 (Jessie) on your Host
. Install Elbe on Host Linux
. Use elbe init to generate `initvm`
. Build the root-filesystem

Steps 1 and 2 need only be performed once.

NOTE: When Debian is running inside a VM (vmware etc), you need to make sure,
      that nested KVM is working.


Customisation of the build
--------------------------

The Elbe xml contains an archive, which can contain Configuration Files,
and additional Software. This archive is extracted during onto the Image
during the Buildprocess. It allows you to override any File, which needs to be
different from the default Debian Install.

This guide also explains how the archive can be extracted from the xml File,
and regenerated.

Elbe also allows to manipulate the generated root-filesystem through a set of
`<finetuning>` rules. We also describe, how these can be used to add a user,
change directory permissions, and remove Files from the root-filesystem.

In the last chapter we describe, how sourcecode can be accessed.

Installing Elbe
---------------

There are several possibilities to install Elbe.
The simplest method is by installing prebuilt binary packages
via linutronix package repository on a Debian 8 (Jessie) System.

But elbe can also be installed from git.

Binary Debian Packages
~~~~~~~~~~~~~~~~~~~~~~

The latest development packages for elbe reside in the following Repository

--------------------------------------------------------
http://debian.linutronix.de/elbe-testing
--------------------------------------------------------

Create the file `/etc/apt/sources.list.d/elbe-testing.list`
with the following contents:

--------------------------------------------------------
deb http://debian.linutronix.de/elbe-testing jessie main
--------------------------------------------------------

Then as root run:

--------------------------------------------------------
$ apt-get update
$ apt-get install elbe elbe-control
--------------------------------------------------------

Git Version
~~~~~~~~~~~

If you can not use Debian Jessie, you can also checkout the current
Elbe sourcecode via git from github.

--------------------------------------------------------
$ git clone https://github.com/Linutronix/elbe.git
Cloning into 'elbe'...
remote: Counting objects: 5435, done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 5435 (delta 1), reused 0 (delta 0), pack-reused 5427
Receiving objects: 100% (5435/5435), 1.94 MiB | 1.92 MiB/s, done.
Resolving deltas: 100% (3943/3943), done.
Checking connectivity... done.
$ cd elbe
$ git checkout -b elbe-1.0 origin/devel/elbe-1.0
Branch elbe-1.0 set up to track remote branch devel/elbe-1.0 from origin.
Switched to a new branch 'elbe-1.0'
$ ls
AUTHORS  ChangeLog  COPYING  debian  dockerfile  docs  elbe   elbepack
examples INSTALL    Makefile README  setup.py    test  THANKS TODO
--------------------------------------------------------

Please note, that the master branch is pointing to the old elbe version 0.5.x
until elbe-1.0 is finalized.

Elbe can run without being installed from the git checkout.
Just note that file paths are different under this situation.

--------------------------------------------------------
elbe -> ./elbe
/usr/share/doc/elbe-doc/examples -> examples/
--------------------------------------------------------


Create initvm and submit xml Files
----------------------------------

The first thing you need to do is set up a virtual machine for
generating root filesystems.

This virtual machine is referred to as "initvm". You will want your
initvm to be the same architecture as your workstation. This allows
using kvm for acceleration, which will accellerate the build process a lot.

-------------------------------------------------------------------------------
$ elbe initvm create --directory=initvm
/home/torbenh/elbe/elbe/initvm
gpg: keyring `/tmp/tmpPfPXt4/secring.gpg' created
gpg: keyring `/tmp/tmpPfPXt4/etc/apt/trusted.gpg.d/linutronix-elbe.gpg' created
gpg: key 22BB8F84: public key "ELBE Devel (Linutronix Elbe developers) <elbe-devel@linutronix.de>" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
--2015-08-17 15:26:26--  http://debian.linutronix.de/elbe-testing/elbe-repo.pub
Resolving debian.linutronix.de (debian.linutronix.de)... 2001:470:1f0b:db:abcd:42:0:1, 62.245.132.108
Connecting to debian.linutronix.de (debian.linutronix.de)|2001:470:1f0b:db:abcd:42:0:1|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1763 (1.7K)
Saving to: ‘/tmp/tmpPfPXt4/tmpkey.gpg’

/tmp/tmpPfPXt4/tmpkey.gpg             100%[========================================================================>]   1.72K  --.-KB/s   in 0s

2015-08-17 15:26:26 (346 MB/s) - ‘/tmp/tmpPfPXt4/tmpkey.gpg’ saved [1763/1763]

...

Installing the base system  ... 17%... 20%... 30%... 40%... 50%... 60%... 70%... 83%... 91%... 100%
Configuring apt  ... 16%... 25%... 32%... 41%... 50%... 66%... 75%... 83%... 91%... 100%
Select and install software  ... 10%... 26%... 31%... 40%... 50%... 61%... 70%... 80%... 90%... 100%
Installing GRUB boot loader  ... 16%... 33%... 50%... 66%... 83%... 100%
The system is going down NOW!.. 14%... 23%... 33%... 42%... 52%... 61%... 71%... 80%... 90%
Sent SIGTERM to all processes
Sent SIGKILL to all processes
Requesting system reboot
[  589.432092] Restarting system.
mkdir -p .stamps
touch .stamps/stamp-install-initial-image
-------------------------------------------------------------------------------


This creates an "initvm" subdirectory and builds the initvm inside this directory.

Submitting an xml File
----------------------

Submitting an xml File triggers an image build inside the initvm.
Once the initvm has been created and is running, you can submit xml Files using

-------------------------------------------------------------------------------
$ elbe initvm submit --directory=initvm /usr/share/doc/elbe-doc/examples/rescue.xml
Build started, waiting till it finishes
project still busy, waiting
project still busy, waiting

...

project still busy, waiting
project still busy, waiting
project still busy, waiting

Build finished !


ELBE Package validation
=======================


Package List validation
 ----------------------

No Errors found

Getting generated Files

Saving generated Files to /home/torbenh/elbe/elbe/elbe-build-20150817-155038
source.xml      (Current source.xml of the project)
rescue.cpio     (Image)
validation.txt  (Package list validation result)
elbe-report.txt         (Report)
log.txt         (Log file)
-------------------------------------------------------------------------------


Ports opened by initvm
----------------------

The initvm will open port 7587 on localhost, and allows the elbe control Tool
to communicate with it.

Advanced usage
--------------

Elbe Archive
~~~~~~~~~~~~

The elbe xml file contains an Archive which is extracted into the
root-filesystem during the image generation phase.

It is acessed with the following commands:

----------------------------------------------------------------
$ elbe get_archive fun.xml archive.tar.bz2
----------------------------------------------------------------

Its a normal tar.bz2 which can be manipulated and regenerated using tar

----------------------------------------------------------------
$ mkdir arch
$ tar xvfj archive.tar.bz2 -C arch
$ echo hello > arch/hello
----------------------------------------------------------------

When regenerating the tar archive, be careful about file ownership inside the
tar file.

----------------------------------------------------------------
$ tar cvfj archive.tar.bz2 --owner=root --group=root -C arch/ .
----------------------------------------------------------------

The updated archive File can then be inserted into the xml File:

----------------------------------------------------------------
$ elbe chg_archive fun.xml archive.tar.bz2
----------------------------------------------------------------

During development and inside Version Control we use the following Makefile,
to update the archive inside the xml File from a archive directory in the
same folder.

[source,Makefile]
----------------------------------------------------------------
all: update-archive

.PHONY: archive.tar.bz2 update-archive

archive.tar.bz2:
	tar cvfj archive.tar.bz2 --owner=root --group=root -C archive/ .


update-archive: archive.tar.bz2
	elbe chg_archive fun.xml archive.tar.bz2
----------------------------------------------------------------



Adding Packages to the List of installed Packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Xml File contains a List of Installed packages `<pkg-list>` in the
`<target>` xml node. Inserting a line containing

[source,xml]
----------------------------------------------------
<pkg>util-linux</pkg>
----------------------------------------------------

will add the `util-linux` package to the install.


Using the finetuning rules
~~~~~~~~~~~~~~~~~~~~~~~~~~

An elbe xml File can contain a set of finetuning rules. Finetuning is used to
customize the target RFS, e.g. remove man-pages. Here is an example
finetuning from `/usr/share/doc/elbe-doc/examples/elbe-desktop.xml`:

[source,xml]
---------------------------------------------------------------------------------
		<finetuning>
			<rm>var/cache/apt/archives/*.deb</rm>
			<adduser passwd="elbe" shell="/bin/bash">elbe</adduser>
		</finetuning>
---------------------------------------------------------------------------------

rm
^^
The `<rm>` Node removes Files from the root-filesystem.

adduser
^^^^^^^
The adduser node allows to create a user.
Our example creates the User `elbe` with the password `elbe`.

Its also possible to specify groups the new user should be part of:


[source,xml]
---------------------------------------------------------------------------------
	<adduser passwd="elbe" shell="/bin/bash" groups="audio,video,dialout">elbe</adduser>
---------------------------------------------------------------------------------

Changing ownership of directories or files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is currently no special finetuning node for `chmod` and `chown`.
These need to be specified via the command tag, which allows running any command,
that is available in the built root filesystem.

[source,xml]
---------------------------------------------------------------------------------
	<command>chown elbe:elbe /mnt</command>
	<command>chmod 777 /mnt</command>
---------------------------------------------------------------------------------

Further Example
^^^^^^^^^^^^^^^
A more complete example can be found in the elbe overview docs in
`/usr/share/doc/elbe-doc/elbeoverview-en.html`
