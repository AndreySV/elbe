Embedded Linux Build Environment (elbe) Quickstart Guide
========================================================

Elbe is a
Debian based system to generate root-filesystems for embedded devices.

You have probably received a root-filesystem, which has been built with Elbe.
Additionally you should have an xml File describing the root-filesystem.

This quickstart guide describes the steps necessary to rebuild the 
root-filesystem from the xml File.

Steps necessary
---------------

. Install Debian 8 (Jessie) on your Host
. Install Elbe on Host Linux
. Use elbe init to generate `initvm`
. Build the root-filesystem

Steps 1 and 2 need only be performed once.

Customisation of the build
--------------------------

The Elbe xml contains an archive, which can contain Configuration Files, 
and additional Software. This archive is extracted during onto the Image
during the Buildprocess. It allows you to override any File, which needs to be different
from the default Debian Install.

This guide also explains how the archive can be extracted from the xml File, and regenerated 

Elbe also allows to manipulate the generated root-filesystem through a set of
`<finetuning>` rules. We also describe, how these can be used to add a user, change
directory permissions, and remove Files from the root-filesystem.

In the last chapter we describe, how sourcecode can be accessed.

Installing Elbe
---------------

There are several possibilities to install Elbe.
The simplest method is by installing prebuilt binary packages 
via linutronix package repository on a Debian 8 (Jessie) System.

But elbe can also be installed from git.

Binary Debian Packages
~~~~~~~~~~~~~~~~~~~~~~

The latest development packages for elbe reside in the following Repository

--------------------------------------------------------
http://debian.linutronix.de/elbe-testing
--------------------------------------------------------

Create the file `/etc/apt/sources.list.d/elbe-testing.list`
with the following contents:

--------------------------------------------------------
deb http://debian.linutronix.de/elbe-testing jessie main
--------------------------------------------------------

Then as root run:

--------------------------------------------------------
$ apt-get update
$ apt-get install elbe elbe-control
--------------------------------------------------------

Git Version
~~~~~~~~~~~

If you can not use Debian Jessie, you can also checkout the current
Elbe sourcecode via git from github.

--------------------------------------------------------
$ git clone https://github.com/Linutronix/elbe.git
Cloning into 'elbe'...
remote: Counting objects: 5435, done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 5435 (delta 1), reused 0 (delta 0), pack-reused 5427
Receiving objects: 100% (5435/5435), 1.94 MiB | 1.92 MiB/s, done.
Resolving deltas: 100% (3943/3943), done.
Checking connectivity... done.
$ cd elbe
$ git checkout -b elbe-1.0 origin/devel/elbe-1.0
Branch elbe-1.0 set up to track remote branch devel/elbe-1.0 from origin.
Switched to a new branch 'elbe-1.0'
$ ls
AUTHORS  ChangeLog  COPYING  debian  dockerfile  docs  elbe   elbepack  
examples INSTALL    Makefile README  setup.py    test  THANKS TODO
--------------------------------------------------------

Please note, that the master branch is pointing to the old elbe version 0.5.x
until elbe-1.0 is finalized.

Elbe can run without being installed from the git checkout.
Just note that file paths are different under this situation.

--------------------------------------------------------
elbe -> ./elbe 
/usr/share/doc/elbe-doc/examples -> examples/
--------------------------------------------------------


Create initvm
-------------

The first thing you need to do is set up a virtual machine for
generating root filesystems. 

This virtual machine is referred to as "initvm". You will want your
initvm to be the same architecture as your workstation. This allows
using kvm for acceleration, which will accerlerate the build process a lot.

To create the initvm you need a special elbe XML file that describes the
initvm to create. The elbe-doc package includes an example that can be 
used "as is" if your workstation is x86_64: 

----------------------------------------------------------------
/usr/share/doc/elbe-doc/examples/elbe-init-with-ssh.xml
----------------------------------------------------------------

This installs the
openssh-server on the initvm and sets up ssh port forwarding on local
port 5022 so you can use ssh to connect to my running initvm.

To create the initvm, first run this:

----------------------------------------------------------------------------------------------
$ elbe init --directory=initvm /usr/share/doc/elbe-doc/examples/elbe-init-with-ssh.xml
initvm
Reading package lists... Done
Building dependency tree... Done
Reading package lists... DonetmpburdqJ/etc/apt/trusted.gpg.d/.No keyring installed in /tmp/tmpburdqJ/etc/apt/trusted.gpg.d/.
Building dependency tree... Done
No keyring installed in /tmp/tmpburdqJ/etc/apt/trusted.gpg.d/.No keyring installed in /tmp/tmpburdqJ/etc/apt/trusted.gpg.d/.--2015-05-11 17:23:42--  http://debian.linutronix.de/elbe-testing/pool/main/e/elbe-bootstrap/elbe-bootstrap_1.0_amd64.deb
Resolving debian.linutronix.de (debian.linutronix.de)... 2001:470:1f0b:db:abcd:42:0:1, 62.245.132.108
Connecting to debian.linutronix.de (debian.linutronix.de)|2001:470:1f0b:db:abcd:42:0:1|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 18397860 (18M) [application/x-debian-package]
Saving to: ‘/tmp/tmpzlwx01/pkg.deb’

/tmp/tmpzlwx01/pkg.deb                100%[========================================================================>]  17.54M  7.88MB/s   in 2.2s   

2015-05-11 17:23:45 (7.88 MB/s) - ‘/tmp/tmpzlwx01/pkg.deb’ saved [18397860/18397860]
----------------------------------------------------------------------------------------------

If you can only connect to the Internet via a Proxy Server, you can specify that on the commandline:

----------------------------------------------------------------------------------------------
$ elbe init --proxy=http://enterprise-proxy.de:8888/ --directory=initvm /usr/share/doc/elbe-doc/examples/elbe-init-with-ssh.xml
----------------------------------------------------------------------------------------------


This creates an "initvm" subdirectory and puts all the necessary project
files to build the initvm there.

Then the initvm is built with:

----------------------------------------------------------------------------------------------
$ cd initvm
$ make
----------------------------------------------------------------------------------------------

NOTE: If you get error messages about "virtio-rng-pci" then your qemu is not
      version 1.3 or higher. Make sure you use a newer qemu.

Once this is finished, you now have an initvm that you can use to build
whatever type and as many root filesystems as you want. You can start
the initvm by running (from within the initvm directory):

----------------------------------------------------------------------------------------------
$ make run-con
----------------------------------------------------------------------------------------------


This initvm will open port 8080 on localhost, and allows the elbe control Tool
to communicate with it. Also the sshd inside the VM will be available via Port 5022.

Add the following lines to the `~/.ssh/config` on your host , so that you can access the VM 
easiely:

---------------------------------------
Host vm
Port 5022
HostName localhost
---------------------------------------

NOTE: Root Password is `root`


Build Rootfilesystem
--------------------

There are 2 ways to build the Rootfilesystem 

. via ssh login into the initvm
. via the elbe control tool


Building via ssh and elbe buildchroot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Once you have your XML file you need to copy it to your initvm. For
example, if you have openssh-server and port forwarding in the initvm
and the initvm is running:


----------------------------------------------------------------
$ scp fun.xml root@vm:.
----------------------------------------------------------------

NOTE: Root Password is `root`

Then ssh into the VM using:

----------------------------------------------------------------
$ ssh root@vm
----------------------------------------------------------------

Everything else we do is now on the initvm as root. Any commands I now
show will be from within the initvm.

To build my "fun.xml" root filesystem:

----------------------------------------------------------------
# elbe buildchroot --target=fun --output=fun.log --skip-cdrom fun.xml
----------------------------------------------------------------

When this command finishes I will have a "fun" subdirectory (specified
with the --target= argument) that contains all the generated rootfs
files. I also have a file "fun.log" that saved the elbe build protocol
for the root filesystem.

If you want to do some primitive testing or looking inside your new root
filesystem, you can chroot into it with:

----------------------------------------------------------------
# elbe chroot --target fun
----------------------------------------------------------------

Now you are inside your new root filesystem. Even though this filesystem
may be for another architecture, elbe makes use of the qemu-*-static
binaries to emulate the architecture so you can actually execute the
binaries in that root filesystem. Obviously being in a chroot
environment is not the same as a native boot, but is often sufficient to
do some looking around. With "exit" you can exit the chroot and return
to your initvm environment.

NOTE: In the above command I used the --target option. This is important
      if you want to switch to the target's generated root filesystem
      (fun/target/). If you leave the --target option off, you will
      chroot into a root filesystem that was used to build the target
      filesystem (fun/chroot/).

If you make changes to your XML file, you can regenerate your root
filesystem using the same command as before:

----------------------------------------------------------------
# elbe buildchroot --target=fun --output=fun.log --skip-cdrom fun.xml
----------------------------------------------------------------

In this example elbe will see that a "fun" directory with existing root
filesystem and attempt to efficiently make the necessary changes based
on the XML changes you have made (elbe has a copy of the old XML file as
fun/source.xml).

However... this sometimes introduces problems or
differences from generating from scratch. So it might make sense to 
regenerate the root filesystem from scratch every time, the xml is changed.


----------------------------------------------------------------
# rm -rf fun fun.log
# elbe buildchroot --target=fun --output=fun.log --skip-cdrom fun.xml
----------------------------------------------------------------

This will be fixed in elbe-1.0.

Elbe has many other features. Refer to the installed documentation in
the manpages and `/usr/share/doc/elbe-doc/elbeoverview-en.html`




Elbe control Tool
~~~~~~~~~~~~~~~~~

elbe control allows to communicate with the elbe daemon inside the initvm.

To create a Project based the XML File, which you received, do the following:

----------------------------------------------------------------
$ elbe control create_project example.xml
OK
----------------------------------------------------------------

You can list the projects using:

----------------------------------------------------------------
$ elbe control list_projects
/var/cache/elbe/d316dd71-a1d4-4ef8-98f7-e8e671c714c9    example   08.15   needs_build     2015-05-11 12:33:11.319908
----------------------------------------------------------------

Start the build via:

----------------------------------------------------------------
$ elbe control build /var/cache/elbe/d316dd71-a1d4-4ef8-98f7-e8e671c714c9 
OK
----------------------------------------------------------------

The Project will now build, which you can observe via:

----------------------------------------------------------------
$ elbe control list_projects                                                                                                                        
/var/cache/elbe/d316dd71-a1d4-4ef8-98f7-e8e671c714c9    example   08.15   busy    2015-05-11 12:33:11.319908
----------------------------------------------------------------

Once it finishes, it will report:

----------------------------------------------------------------
$ elbe control list_projects                                                                                                                        
/var/cache/elbe/d316dd71-a1d4-4ef8-98f7-e8e671c714c9    example   08.15   build_done      2015-05-11 12:33:11.319908
----------------------------------------------------------------

Once the build has finished, you can query which files got built:

----------------------------------------------------------------
$ elbe control get_files /var/cache/elbe/d316dd71-a1d4-4ef8-98f7-e8e671c714c9
source.xml (Current source.xml of the project)
nfsroot.tar.gz (Image)
sda.img (Image)
validation.txt (Package list validation result)
elbe-report.txt (Report)
log.txt (Log file)
----------------------------------------------------------------

You can extract these files out of the VM:

----------------------------------------------------------------
$ elbe control get_file /var/cache/elbe/d316dd71-a1d4-4ef8-98f7-e8e671c714c9 sda.img                                                                
sda.img saved
----------------------------------------------------------------

Elbe Archive
------------

The elbe xml file contains an Archive which is extracted into the root-filesystem during
the image generation phase.

It is acessed with the following commands:

----------------------------------------------------------------
$ elbe get_archive fun.xml archive.tar.bz2
----------------------------------------------------------------

Its a normal tar.bz2 which can be manipulated and regenerated using tar

----------------------------------------------------------------
$ mkdir arch
$ tar xvfj archive.tar.bz2 -C arch
$ echo hello > arch/hello
----------------------------------------------------------------

When regenerating the tar archive, be careful about file ownership inside the
tar file.

----------------------------------------------------------------
$ tar cvfj archive.tar.bz2 --owner=root --group=root -C arch/ .
----------------------------------------------------------------

The updated archive File can then be inserted into the xml File:

----------------------------------------------------------------
$ elbe set_archive fun.xml archive.tar.bz2
----------------------------------------------------------------

During development and inside Version Control we use the following Makefile,
to update the archive inside the xml File from a archive directory in the
same folder.

[source,Makefile]
----------------------------------------------------------------
all: update-archive

.PHONY: archive.tar.bz2 update-archive

archive.tar.bz2:
	tar cvfj archive.tar.bz2 --owner=root --group=root -C archive/ .


update-archive: archive.tar.bz2
	elbe chg_archive fun.xml archive.tar.bz2
----------------------------------------------------------------



Adding Packages to the List of Installed Packages
-------------------------------------------------

The Xml File contains a List of Installed packages `<pkg-list>` in the `<target>` xml node.
Inserting a line containing

[source,xml]
----------------------------------------------------
<pkg>util-linux</pkg>
----------------------------------------------------

will add the `util-linux` package to the install.

Using the finetuning rules
--------------------------

An elbe xml File can contain a set of finetuning rules. Here is an example 
finetuning from `/usr/share/doc/elbe-doc/examples/elbe-desktop.xml`:

[source,xml]
---------------------------------------------------------------------------------
		<finetuning>
			<rm>var/cache/apt/archives/*.deb</rm>
			<adduser passwd="elbe" shell="/bin/bash">elbe</adduser>
		</finetuning>
---------------------------------------------------------------------------------

rm
~~

The `<rm>` Node removes Files from the root-filesystem.

adduser
~~~~~~~

The adduser node allows to create a user.
Our example creates the User `elbe` with the password `elbe`.

Its also possible to specify groups the new user should be part of:


[source,xml]
---------------------------------------------------------------------------------
	<adduser passwd="elbe" shell="/bin/bash" groups="audio,video,dialout">elbe</adduser>
---------------------------------------------------------------------------------

Changing ownership of directories or files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is currently no special finetuning node for `chmod` and `chown`.
These need to be specified via the command tag, which allows running any command,
that is available in the built root filesystem.

[source,xml]
---------------------------------------------------------------------------------
	<command>chown elbe:elbe /mnt</command>
	<command>chmod 777 /mnt</command>
---------------------------------------------------------------------------------

Further Example
~~~~~~~~~~~~~~~

A more complete example can be found in the elbe overview docs in
`/usr/share/doc/elbe-doc/elbeoverview-en.html`


Source Code
-----------

The generated root-filesystem is a full-featured Debian System under normal
circumstances. So when the source Repositories are specified correctly,
its always possible to download the source for any installed Package using 

----------------------------------------------------------------------
$ apt-get source <pkgname>
----------------------------------------------------------------------

For example on jessie:

----------------------------------------------------------------------
$ apt-get source util-linux
Reading package lists... Done
Building dependency tree       
Reading state information... Done
NOTICE: 'util-linux' packaging is maintained in the 'Git' version control system at:
git://git.debian.org/git/collab-maint/pkg-util-linux.git
Need to get 4,011 kB of source archives.
Get:1 http://ftp.de.debian.org/debian/ jessie/main util-linux 2.25.2-6 (dsc) [3,443 B]
Get:2 http://ftp.de.debian.org/debian/ jessie/main util-linux 2.25.2-6 (tar) [3,704 kB]
Get:3 http://ftp.de.debian.org/debian/ jessie/main util-linux 2.25.2-6 (diff) [304 kB]
Fetched 4,011 kB in 0s (5,879 kB/s) 
dpkg-source: info: extracting util-linux in util-linux-2.25.2
dpkg-source: info: unpacking util-linux_2.25.2.orig.tar.xz
dpkg-source: info: unpacking util-linux_2.25.2-6.debian.tar.xz
dpkg-source: info: applying Multiarch-support-in-util-linux-build.patch
dpkg-source: info: applying cfdisk.8-mention-slang-next-to-curses.-Closes-295487.patch
dpkg-source: info: applying man-page-tweaks-cleanup-my_dev_t.h-ancient-stuff.patch
dpkg-source: info: applying Disable-the-fallback-clause-in-hwclock-when-dev-rtc-.patch
dpkg-source: info: applying verbose-tests.patch
dpkg-source: info: applying Update-POT-file.patch
dpkg-source: info: applying Update-PO-files.patch
dpkg-source: info: applying Update-German-translation.patch
dpkg-source: info: applying Update-Spanish-translation.patch
dpkg-source: info: applying Update-French-translation.patch
dpkg-source: info: applying Update-Ukrainian-translation.patch
dpkg-source: info: applying Update-Brazilian-Portuguese-translation.patch
dpkg-source: info: applying Update-Chinese-simplified-translation.patch
dpkg-source: info: applying Update-Danish-translation.patch
dpkg-source: info: applying Update-Finnish-translation.patch
dpkg-source: info: applying Update-Japanese-translation.patch
dpkg-source: info: applying Update-Russian-translation.patch
dpkg-source: info: applying Trivial-unfuzzy.patch
dpkg-source: info: applying libblkid-care-about-unsafe-chars-in-cache.patch
dpkg-source: info: applying unshare-Fix-map-root-user-to-work-on-new-kernels.patch
----------------------------------------------------------------------

You can now find the source here:

----------------------------------------------------------------------
$ ls
util-linux-2.25.2  util-linux_2.25.2-6.debian.tar.xz  util-linux_2.25.2-6.dsc  util-linux_2.25.2.orig.tar.xz
----------------------------------------------------------------------

NOTE: This also works on the target.

When elbe buildchroot builds the root-filesystem, it can be instructed to download all sourcecode
and create a source cdrom.

----------------------------------------------------------------
# elbe buildchroot --target=fun --output=fun.log --build_sources fun.xml
----------------------------------------------------------------

