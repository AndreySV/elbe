#!/usr/bin/env python
#
# ELBE - Debian Based Embedded Rootfilesystem Builder
# Copyright (C) 2016  Linutronix GmbH
#
# This file is part of ELBE.
#
# ELBE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ELBE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ELBE.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import urwid

from mako import exceptions
from mako.template import Template
from shutil import copyfile

from elbepack.directories import mako_template_dir

gen_deb = None
deb = {}

def template (fname):
    global deb
    return Template(filename=fname).render(**deb)

def d_kernel_write ():
    global deb
    deb['k_name'] = 'elbe'
    deb['k_version'] = '4.4'
    deb['k_arch'] = 'arm'
    deb['k_debarch'] = 'armhf'
    deb['k_debversion'] = '1.0'
    deb['loadaddr'] = '0x800800'
    deb['m_name'] = 'elbe'
    deb['m_mail'] = 'unknown@unknown.com'
    deb['source_format'] = 'native'
    deb['defconfig'] = 'omap2plus_defconfig'
    deb['imgtype'] = 'zImage'
    deb['cross_compile'] = 'arm-linux-gnueabihf-'
    deb['distro'] = 'stable'

    os.mkdir ('debian')
    os.mkdir ('debian/source')
    tmpl_dir = os.path.join(mako_template_dir, 'debianize/kernel')
    pkg_name = deb['k_name']+'-'+deb['k_version']

    for tmpl in ['control', 'rules']:
        with open (os.path.join('debian/', tmpl), 'w') as f:
            mako = os.path.join(tmpl_dir, tmpl+'.mako')
            f.write (template(mako))

    with open ('debian/source/format', 'w') as f:
        mako = os.path.join(tmpl_dir, 'format.mako')
        f.write (template(mako))

    cmd = 'dch --package linux-' + pkg_name + ' -v ' + deb['k_debversion'] + ' --create -M -D ' + deb['distro'] + ' "generated by elbe debianize"'
    os.system (cmd)

    copyfile (os.path.join(tmpl_dir, 'copyright'), 'debian/copyright')
    copyfile (os.path.join(tmpl_dir, 'linux-image.install'),
              'debian/linux-image-'+pkg_name+'.install')
    copyfile (os.path.join(tmpl_dir, 'linux-headers.install'),
              'debian/linux-headers-'+pkg_name+'.install')

    with open ('debian/compat', 'w') as f:
        f.write ('9')

def d_kernel ():
    global gen_deb
    if os.path.exists ('debian'):
        print 'debian already exists, nothing to do'
        sys.exit (-1)

    gen_deb = d_kernel_write
    return [urwid.Text ('huhu')]

def d_autotools ():
    print 'autotools'

debianizer = {'kernel':    d_kernel,
              'autotools': d_autotools}

files = {'kernel': ['Kbuild', 'Kconfig', 'MAINTAINERS', 'REPORTING-BUGS'],
         'autotools': ['configure.ac'] }

def unhandled (key):
    if key == 'f8':
        if gen_deb:
             gen_deb ()

        raise urwid.ExitMainLoop ()

def urwid_init (debwizard):
    debianizer_content = debwizard ()
    header = urwid.AttrWrap (urwid.Text ('ELBE debianizer'), 'header')
    debnize = urwid.ListBox (urwid.SimpleListWalker (debianizer_content))
    frame = urwid.Frame (urwid.AttrWrap (debnize, 'body'), header=header)
    screen = urwid.raw_display.Screen ()
    palette = [
        ('body','black','light gray', 'standout'),
        ('reverse','light gray','black'),
        ('header','white','dark red', 'bold'),
        ('important','dark blue','light gray',('standout','underline')),
        ('editfc','white', 'dark blue', 'bold'),
        ('editbx','light gray', 'dark blue'),
        ('editcp','black','light gray', 'standout'),
        ('bright','dark gray','light gray', ('bold','standout')),
        ('buttn','black','dark cyan'),
        ('buttnf','white','dark blue','bold'),
    ]
    urwid.MainLoop (frame, palette, screen, unhandled_input=unhandled).run ()

def run_command ( args ):
    for key in files.keys ():
       match = True
       for f in files[key]:
           if not os.path.exists (f):
               match = False
       if match:
           urwid_init (debianizer[key])
           sys.exit (0)
