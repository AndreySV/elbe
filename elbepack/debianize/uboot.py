# ELBE - Debian Based Embedded Rootfilesystem Builder
# Copyright (c) 2018 Philipp Rosenberger <p.rosenberger@linutronix.de>
# Copyright (c) 2018 Torben Hohn <torben.hohn@linutronix.de>
#
# SPDX-License-Identifier: GPL-3.0-or-later

import os

from time import sleep
from shutil import copyfile

from npyscreen import TitleText, notify

from elbepack.directories import mako_template_dir
from elbepack.debianize.base import DebianizeBase, template
from elbepack.shellhelper import system

from pkg_resources import parse_version as V


class UBoot (DebianizeBase):

    name = "uboot"
    files = ['Makefile', 'Kbuild', 'Kconfig', 'MAINTAINERS', 'config.mk']
    copyright_fname = 'Licenses/README'

    def __init__(self):
        self.verstr = None
        self.defconfig = None
        self.imgname = None
        self.cross = None
        self.k_version = None

        DebianizeBase.__init__(self)

    def get_version(self):
        with open('Makefile', 'r') as f:
            for line in f:
                if line.startswith('VERSION = '):
                    version = line.split('=')[1].strip()
                elif line.startswith('PATCHLEVEL = '):
                    patchlevel = line.split('=')[1].strip()
                    break

        self.verstr = version + '.' + patchlevel
        # With v2014.04 the u-boot Makefile knows the 'tools-only' target.
        if V(self.verstr) < V('2014.04'):
            notify("Only U-Boot >= 2014.04 is supported.\n"
                   "This is version '%s'" % self.verstr,
                   title='Warning')
            sleep(10)

        if V(self.verstr) >= V('2017.09'):
            self.deb['envtools'] = 'envtools'
        else:
            self.deb['envtools'] = 'env'

    def gui(self):
        self.get_version()
        self.defconfig = self.add_widget_intelligent(
            TitleText, name="defconfig:", value="mx7dsabresd_defconfig")

        self.imgname = self.add_widget_intelligent(
            TitleText,
            name="Imagename:",
            value="u-boot-dtb.imx")

        self.cross = self.add_widget_intelligent(
            TitleText, name="CROSS_COMPILE:", value="arm-linux-gnueabihf-")

        self.k_version = self.add_widget_intelligent(
            TitleText, name="U-Boot Version:", value=self.verstr)

    def debianize(self):
        self.deb['k_arch'] = self.get_k_arch()

        self.deb['defconfig'] = self.defconfig.get_value()
        self.deb['cross_compile'] = self.cross.get_value()
        self.deb['k_version'] = self.k_version.get_value()
        self.deb['imgname'] = self.imgname.get_value()

        self.tmpl_dir = os.path.join(mako_template_dir, 'debianize/u-boot')
        pkg_name = self.deb['p_name'] + '-' + self.deb['k_version']

        for tmpl in ['control', 'rules']:
            with open(os.path.join('debian/', tmpl), 'w') as f:
                mako = os.path.join(self.tmpl_dir, tmpl + '.mako')
                f.write(template(mako, self.deb))

        cmd = 'dch --package u-boot-' + pkg_name + \
            ' -v ' + self.deb['p_version'] + \
            ' --create -M -D ' + self.deb['release'] + \
            ' "generated by elbe debianize"'
        system(cmd)

        copyfile(os.path.join(self.tmpl_dir, 'u-boot-image.install'),
                 'debian/u-boot-image-' + pkg_name + '.install')
        copyfile(os.path.join(self.tmpl_dir, 'u-boot-tools.install'),
                 'debian/u-boot-tools-' + pkg_name + '.install')

        self.hint = "use 'dpkg-buildpackage -a%s' to build the package" % (
                self.deb['p_arch'])


DebianizeBase.register(UBoot)
